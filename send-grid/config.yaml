# Plugin Metadata:
# Name: send-grid
# Version: 0.1.0
# Description: SendGrid Agnet for sending emails.
# Author: Cyrus Mobini <cyrus.mobini@solace.com>
# 
# --- Start of Agent Configuration Template ---
# Solace Agent Mesh: Plugin Configuration Template
#
# This file serves as a template for creating new agent configurations from this plugin.
# Use placeholders like __COMPONENT_KEBAB_CASE_NAME__, __COMPONENT_PASCAL_CASE_NAME__,
# and __COMPONENT_UPPER_SNAKE_CASE_NAME__ where the specific component name should be inserted.

log:
  stdout_log_level: INFO
  log_file_level: DEBUG
  log_file: __COMPONENT_KEBAB_CASE_NAME__.log

# To use the `shared_config.yaml` file, uncomment the following line and remove the `shared_config` section below.
# !include ../shared_config.yaml
shared_config:
  - broker_connection: &broker_connection
      dev_mode: ${SOLACE_DEV_MODE, false}
      broker_url: ${SOLACE_BROKER_URL, ws://localhost:8080}
      broker_username: ${SOLACE_BROKER_USERNAME, default}
      broker_password: ${SOLACE_BROKER_PASSWORD, default}
      broker_vpn: ${SOLACE_BROKER_VPN, default}
      temporary_queue: ${USE_TEMPORARY_QUEUES, true}

  - models:
    general: &general_model
      # This dictionary structure tells ADK to use the LiteLlm wrapper.
      # 'model' uses the specific model identifier your endpoint expects.
      model: ${LLM_SERVICE_GENERAL_MODEL_NAME} # Use env var for model name
      # 'api_base' tells LiteLLM where to send the request.
      api_base: ${LLM_SERVICE_ENDPOINT} # Use env var for endpoint URL
      # 'api_key' provides authentication.
      api_key: ${LLM_SERVICE_API_KEY} # Use env var for API key

  - services:
    # Default session service configuration
    session_service: &default_session_service
      type: "memory"
      default_behavior: "PERSISTENT"
    
    # Default artifact service configuration
    artifact_service: &default_artifact_service
      type: "filesystem"
      base_path: "/tmp/samv2"
      artifact_scope: namespace # Or "namespace", "app", "custom"

apps:
  - name: __COMPONENT_KEBAB_CASE_NAME__-app
    app_base_path: . 
    app_module: solace_agent_mesh.agent.sac.app 
    broker:
      <<: *broker_connection

    # App Level Config
    app_config:
      namespace: ${NAMESPACE} 
      supports_streaming: true 
      agent_name: "__COMPONENT_PASCAL_CASE_NAME__" 
      display_name: "__COMPONENT_SPACED_CAPITALIZED_NAME__ Agent"
      model: *general_model 

      instruction: |
        You're __COMPONENT_SPACED_CAPITALIZED_NAME__ agent. You can use your `send_email` tool to send emails via SendGrid.

        If the user has provided you with the exact email content, pass it directly to the tool without any modifications.

        But if the user is asking you to draft an email based on a topic or a brief description, you should first create a well-structured email content. This includes a clear subject line, a greeting, the main body of the email, and a closing statement. Once you've drafted the email, pass the complete content to the `send_email` tool. DO NOT use templates or placeholders in the email content. Always ensure the email is ready to be sent as is.

      tools:
        - tool_type: python
          component_module: send_grid.tools
          component_base_path: . 
          function_name: send_email
          tool_config:
            sendgrid_api_key: ${SENDGRID_API_KEY}
            default_from_email: ${SENDGRID_FROM_EMAIL}

        - group_name: artifact_management
          tool_type: builtin-group

      session_service: *default_session_service
      artifact_service: *default_artifact_service

      artifact_handling_mode: "reference"
      enable_embed_resolution: true
      enable_artifact_content_instruction: true

      agent_card:
        description: "SendGrid Agent for sending emails. Either pass the full email content or ask the agent to create one for you."
        defaultInputModes: ["text"]
        defaultOutputModes: ["text"]
        skills:
          - id: "send_email"
            name: "Send Email"
            description: "Send an email using SendGrid."

      agent_card_publishing: { interval_seconds: 10 }
      agent_discovery: { enabled: false }
      inter_agent_communication:
        allow_list: []
        request_timeout_seconds: 30